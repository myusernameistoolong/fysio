// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Dossier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfTreatments")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfEndProcedure")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeadPractitioner")
                        .HasColumnType("int");

                    b.Property<int>("IntakeDoneBy")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeUnderSuperVisionBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LengthOfTreatments")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PhysioTherapistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadPractitioner");

                    b.HasIndex("IntakeDoneBy");

                    b.HasIndex("IntakeUnderSuperVisionBy");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysioTherapistId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DossierId")
                        .HasColumnType("int");

                    b.Property<bool>("VisibleForPatient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Bday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BigNr")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentNr")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Core.Domain.Physiotherapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BigNr")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentNr")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Physiotherapists");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DossierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformedBy")
                        .HasColumnType("int");

                    b.Property<string>("Specialities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("PerformedBy");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Core.Domain.Dossier", b =>
                {
                    b.HasOne("Core.Domain.Physiotherapist", "PhysiotherapistHeadPractitioner")
                        .WithMany()
                        .HasForeignKey("HeadPractitioner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Physiotherapist", "PhysiotherapistIntakeDoneBy")
                        .WithMany()
                        .HasForeignKey("IntakeDoneBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Physiotherapist", "PhysiotherapistIntakeUnderSuperVisionBy")
                        .WithMany()
                        .HasForeignKey("IntakeUnderSuperVisionBy");

                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithMany("Dossiers")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Physiotherapist", "Physiotherapist")
                        .WithMany()
                        .HasForeignKey("PhysioTherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Physiotherapist");

                    b.Navigation("PhysiotherapistHeadPractitioner");

                    b.Navigation("PhysiotherapistIntakeDoneBy");

                    b.Navigation("PhysiotherapistIntakeUnderSuperVisionBy");
                });

            modelBuilder.Entity("Core.Domain.Note", b =>
                {
                    b.HasOne("Core.Domain.Dossier", "Dossier")
                        .WithMany()
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.HasOne("Core.Domain.Dossier", "Dossier")
                        .WithMany()
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Physiotherapist", "Physiotherapist")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Physiotherapist");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
